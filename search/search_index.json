{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"mkdocs-git-authors-plugin Lightweight MkDocs plugin to display git authors of a markdown page. Setup Install the plugin using pip3: pip3 install mkdocs-git-authors-plugin Next, add the following lines to your mkdocs.yml : plugins : - search - git-authors If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set.","title":"mkdocs-git-authors-plugin"},{"location":"index.html#mkdocs-git-authors-plugin","text":"Lightweight MkDocs plugin to display git authors of a markdown page.","title":"mkdocs-git-authors-plugin"},{"location":"index.html#setup","text":"Install the plugin using pip3: pip3 install mkdocs-git-authors-plugin Next, add the following lines to your mkdocs.yml : plugins : - search - git-authors If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set.","title":"Setup"},{"location":"contributing.html","text":"Contribution Guidelines Thanks for considering to contribute to this project! Some guidelines: Read the Roadmap / Vision Go through the issue list and if needed create a relevant issue to discuss the change design. On disagreements, maintainer(s) will have the final word. You can expect a response from a maintainer within 7 days. If you haven\u2019t heard anything by then, feel free to ping the thread. This package tries to be as simple as possible for the user (hide any complexity from the user). Options are only added when there is clear value to the majority of users. When issues or pull requests are not going to be resolved or merged, they should be closed as soon as possible. This is kinder than deciding this after a long period. Our issue tracker should reflect work to be done. Unit Tests Make sure to install an editable version before running tests: pip install - r tests / test_requirements . txt pip install - e . pytest -- cov = mkdocs_git_authors_plugin -- cov - report term - missing tests If it makes sense, writing tests for your PRs is always appreciated and will help get them merged. In addition, this project uses pyflakes for static code checking: pip install pyflakes pyflakes tests / mkdocs_git_authors_plugin / Manual testing To quickly serve a website with your latest changes to the plugin use the sites in our tests suite. For example: pip install - r tests / test_requirements . txt pip install - e . mkdocs serve - f ./ tests / basic_setup / mkdocs_complete_material . yml Code Style Make sure your code roughly follows PEP-8 and keeps things consistent with the rest of the code. I recommended using black to automatically format your code. We use google-style docstrings. Documentation site Manually deployed by Tim Vink using mkdocs gh-deploy","title":"Contributing"},{"location":"contributing.html#contribution-guidelines","text":"Thanks for considering to contribute to this project! Some guidelines: Read the Roadmap / Vision Go through the issue list and if needed create a relevant issue to discuss the change design. On disagreements, maintainer(s) will have the final word. You can expect a response from a maintainer within 7 days. If you haven\u2019t heard anything by then, feel free to ping the thread. This package tries to be as simple as possible for the user (hide any complexity from the user). Options are only added when there is clear value to the majority of users. When issues or pull requests are not going to be resolved or merged, they should be closed as soon as possible. This is kinder than deciding this after a long period. Our issue tracker should reflect work to be done.","title":"Contribution Guidelines"},{"location":"contributing.html#unit-tests","text":"Make sure to install an editable version before running tests: pip install - r tests / test_requirements . txt pip install - e . pytest -- cov = mkdocs_git_authors_plugin -- cov - report term - missing tests If it makes sense, writing tests for your PRs is always appreciated and will help get them merged. In addition, this project uses pyflakes for static code checking: pip install pyflakes pyflakes tests / mkdocs_git_authors_plugin /","title":"Unit Tests"},{"location":"contributing.html#manual-testing","text":"To quickly serve a website with your latest changes to the plugin use the sites in our tests suite. For example: pip install - r tests / test_requirements . txt pip install - e . mkdocs serve - f ./ tests / basic_setup / mkdocs_complete_material . yml","title":"Manual testing"},{"location":"contributing.html#code-style","text":"Make sure your code roughly follows PEP-8 and keeps things consistent with the rest of the code. I recommended using black to automatically format your code. We use google-style docstrings.","title":"Code Style"},{"location":"contributing.html#documentation-site","text":"Manually deployed by Tim Vink using mkdocs gh-deploy","title":"Documentation site"},{"location":"mailmap.html","text":"Aggregating Authors In some repositories authors may have committed with differing name/email combinations. In order to prevent the output being split it is possible to aggregate authors on arbitrary elements by providing a file .mailmap in the repository's root directory. This is a feature of Git itself. The following example will aggregate the contributions of Jane Doe committed under two email addresses: # .mailmap Jane Doe <jane.doe@company.com> <jane.doe@private-email.com> This will map commits made with the private-email.com to the company address. For more details and further options (e.g. mapping between different names or misspellings etc. see the git-blame documentation .","title":"Aggregating Authors"},{"location":"mailmap.html#aggregating-authors","text":"In some repositories authors may have committed with differing name/email combinations. In order to prevent the output being split it is possible to aggregate authors on arbitrary elements by providing a file .mailmap in the repository's root directory. This is a feature of Git itself. The following example will aggregate the contributions of Jane Doe committed under two email addresses: # .mailmap Jane Doe <jane.doe@company.com> <jane.doe@private-email.com> This will map commits made with the private-email.com to the company address. For more details and further options (e.g. mapping between different names or misspellings etc. see the git-blame documentation .","title":"Aggregating Authors"},{"location":"options.html","text":"Options You can customize the plugin by setting options in your mkdocs.yml file. Here is an example of all the options this plugin offers: plugins : - git-authors : show_contribution : true show_line_count : true count_empty_lines : true show_contribution If this option is set to true (default: false ) the contribution of a author is printed as a percentage of (source file) lines per author. The output is suppressed if there is only one author for a page. Example output: Authors: John Doe (33.33%), Jane Doe (66.67%) (more than one author) Authors: John Doe (one author) show_line_count If this option is set to true (default: false ) the number of lines per author is shown. count_empty_lines If this option is set to true (default: false ) empty lines will count towards an authors' contribution.","title":"Options"},{"location":"options.html#options","text":"You can customize the plugin by setting options in your mkdocs.yml file. Here is an example of all the options this plugin offers: plugins : - git-authors : show_contribution : true show_line_count : true count_empty_lines : true","title":"Options"},{"location":"options.html#show_contribution","text":"If this option is set to true (default: false ) the contribution of a author is printed as a percentage of (source file) lines per author. The output is suppressed if there is only one author for a page. Example output: Authors: John Doe (33.33%), Jane Doe (66.67%) (more than one author) Authors: John Doe (one author)","title":"show_contribution"},{"location":"options.html#show_line_count","text":"If this option is set to true (default: false ) the number of lines per author is shown.","title":"show_line_count"},{"location":"options.html#count_empty_lines","text":"If this option is set to true (default: false ) empty lines will count towards an authors' contribution.","title":"count_empty_lines"},{"location":"usage.html","text":"Usage In supported themes no supported themes yet . In markdown pages You can use the following jinja tags to insert content into your markdown pages: {{ git_page_authors }} a summary of the authors of a page. Output wrapped in <span class='git-page-authors'> {{ git_site_authors }} a summary of all authors of all pages in your site. Output wrapped in <span class='git-site-authors'> For example, adding {{ git_page_authors }} could insert: < span class = 'git-page-authors' >< a href = 'mailto:jane@abc.com' > Jane Doe </ a >< a href = 'mailto:john@abc.com' > John Doe </ a ></ span > Which renders as: Jane Doe , John Doe In theme customizations MkDocs offers possibilities to customize an existing theme . See two examples below: mkdocs-material theme If you use the mkdocs-material theme you can implement git-authors by overriding a template block : 1) Create a new file main.html in docs/overrides : {% extends \"base.html\" %} {% block content %} {{ super() }} {% if git_page_authors %} < div class = \"md-source-date\" > < small > Authors: {{ git_page_authors | default('enable mkdocs-git-authors-plugin') }} </ small > </ div > {% endif %} {% endblock %} 2) In mkdocs.yml make sure to specify the custom directory with the theme overrides: theme : name : material custom_dir : docs/overrides mkdocs theme In the default MkDocs theme we can use overriding partials to add the git-authors info below the page content. 1) Create a new file content.html in docs/overrides : <!-- Overwrites content.html base mkdocs theme, taken from https://github.com/mkdocs/mkdocs/blob/master/mkdocs/themes/mkdocs/content.html --> {% if page.meta.source %} < div class = \"source-links\" > {% for filename in page.meta.source %} < span class = \"label label-primary\" > {{ filename }} </ span > {% endfor %} </ div > {% endif %} {{ page.content }} {% if git_page_authors %} < p >< small > Authors: {{ git_page_authors | default('enable mkdocs-git-authors-plugin') }} </ small ></ p > {% endif %} 2) In mkdocs.yml make sure to specify the custom directory with the theme overrides: theme : name : mkdocs custom_dir : docs/overrides In theme templates To add more detailed git author information to your theme you can customize a MkDocs theme or even develop your own . When enabling this plugin, you will have access to the jinja2 variable git_info which contains as dict with the following structure: { 'page_authors' : [ { 'name' : 'Jane Doe' , 'email' : 'jane@abc.com' , 'last_datetime' : datetime . datetime (), 'lines' : 200 , 'contribution' : '40.0%' }, { 'name' : 'John Doe' , 'email' : 'john@abc.com' , 'last_datetime' : datetime . datetime (), 'lines' : 300 , 'contribution' : '60.0%' } ], 'site_authors' : # same structure } Example usage in theme development An example of how to use in your templates: {% if git_info %} {%- for author in git_info.get('page_authors') -%} < a href = \"{{ author.email }}\" title = \"{{ author.name }}\" > {{ author.name }} </ a > , {%- endfor -%} {% endif %} Alternatively, you could use the simple pre-formatted <span class='git-page-authors git-authors'><a href='mailto:vinktim@gmail.com'>Tim Vink</a></span> to insert a summary of the authors.","title":"Usage"},{"location":"usage.html#usage","text":"","title":"Usage"},{"location":"usage.html#in-supported-themes","text":"no supported themes yet .","title":"In supported themes"},{"location":"usage.html#in-markdown-pages","text":"You can use the following jinja tags to insert content into your markdown pages: {{ git_page_authors }} a summary of the authors of a page. Output wrapped in <span class='git-page-authors'> {{ git_site_authors }} a summary of all authors of all pages in your site. Output wrapped in <span class='git-site-authors'> For example, adding {{ git_page_authors }} could insert: < span class = 'git-page-authors' >< a href = 'mailto:jane@abc.com' > Jane Doe </ a >< a href = 'mailto:john@abc.com' > John Doe </ a ></ span > Which renders as: Jane Doe , John Doe","title":"In markdown pages"},{"location":"usage.html#in-theme-customizations","text":"MkDocs offers possibilities to customize an existing theme . See two examples below:","title":"In theme customizations"},{"location":"usage.html#mkdocs-material-theme","text":"If you use the mkdocs-material theme you can implement git-authors by overriding a template block : 1) Create a new file main.html in docs/overrides : {% extends \"base.html\" %} {% block content %} {{ super() }} {% if git_page_authors %} < div class = \"md-source-date\" > < small > Authors: {{ git_page_authors | default('enable mkdocs-git-authors-plugin') }} </ small > </ div > {% endif %} {% endblock %} 2) In mkdocs.yml make sure to specify the custom directory with the theme overrides: theme : name : material custom_dir : docs/overrides","title":"mkdocs-material theme"},{"location":"usage.html#mkdocs-theme","text":"In the default MkDocs theme we can use overriding partials to add the git-authors info below the page content. 1) Create a new file content.html in docs/overrides : <!-- Overwrites content.html base mkdocs theme, taken from https://github.com/mkdocs/mkdocs/blob/master/mkdocs/themes/mkdocs/content.html --> {% if page.meta.source %} < div class = \"source-links\" > {% for filename in page.meta.source %} < span class = \"label label-primary\" > {{ filename }} </ span > {% endfor %} </ div > {% endif %} {{ page.content }} {% if git_page_authors %} < p >< small > Authors: {{ git_page_authors | default('enable mkdocs-git-authors-plugin') }} </ small ></ p > {% endif %} 2) In mkdocs.yml make sure to specify the custom directory with the theme overrides: theme : name : mkdocs custom_dir : docs/overrides","title":"mkdocs theme"},{"location":"usage.html#in-theme-templates","text":"To add more detailed git author information to your theme you can customize a MkDocs theme or even develop your own . When enabling this plugin, you will have access to the jinja2 variable git_info which contains as dict with the following structure: { 'page_authors' : [ { 'name' : 'Jane Doe' , 'email' : 'jane@abc.com' , 'last_datetime' : datetime . datetime (), 'lines' : 200 , 'contribution' : '40.0%' }, { 'name' : 'John Doe' , 'email' : 'john@abc.com' , 'last_datetime' : datetime . datetime (), 'lines' : 300 , 'contribution' : '60.0%' } ], 'site_authors' : # same structure }","title":"In theme templates"},{"location":"usage.html#example-usage-in-theme-development","text":"An example of how to use in your templates: {% if git_info %} {%- for author in git_info.get('page_authors') -%} < a href = \"{{ author.email }}\" title = \"{{ author.name }}\" > {{ author.name }} </ a > , {%- endfor -%} {% endif %} Alternatively, you could use the simple pre-formatted <span class='git-page-authors git-authors'><a href='mailto:vinktim@gmail.com'>Tim Vink</a></span> to insert a summary of the authors.","title":"Example usage in theme development"}]}